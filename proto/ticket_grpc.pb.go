// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: ticket.proto

package cloudbeespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ticketing_Purchase_FullMethodName   = "/cloudbees.Ticketing/Purchase"
	Ticketing_GetReceipt_FullMethodName = "/cloudbees.Ticketing/GetReceipt"
)

// TicketingClient is the client API for Ticketing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketingClient interface {
	Purchase(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*TicketResponse, error)
	GetReceipt(ctx context.Context, in *User, opts ...grpc.CallOption) (*Receipt, error)
}

type ticketingClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketingClient(cc grpc.ClientConnInterface) TicketingClient {
	return &ticketingClient{cc}
}

func (c *ticketingClient) Purchase(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*TicketResponse, error) {
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, Ticketing_Purchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketingClient) GetReceipt(ctx context.Context, in *User, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, Ticketing_GetReceipt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketingServer is the server API for Ticketing service.
// All implementations should embed UnimplementedTicketingServer
// for forward compatibility
type TicketingServer interface {
	Purchase(context.Context, *TicketRequest) (*TicketResponse, error)
	GetReceipt(context.Context, *User) (*Receipt, error)
}

// UnimplementedTicketingServer should be embedded to have forward compatible implementations.
type UnimplementedTicketingServer struct {
}

func (UnimplementedTicketingServer) Purchase(context.Context, *TicketRequest) (*TicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purchase not implemented")
}
func (UnimplementedTicketingServer) GetReceipt(context.Context, *User) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceipt not implemented")
}

// UnsafeTicketingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketingServer will
// result in compilation errors.
type UnsafeTicketingServer interface {
	mustEmbedUnimplementedTicketingServer()
}

func RegisterTicketingServer(s grpc.ServiceRegistrar, srv TicketingServer) {
	s.RegisterService(&Ticketing_ServiceDesc, srv)
}

func _Ticketing_Purchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketingServer).Purchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ticketing_Purchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketingServer).Purchase(ctx, req.(*TicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticketing_GetReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketingServer).GetReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ticketing_GetReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketingServer).GetReceipt(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// Ticketing_ServiceDesc is the grpc.ServiceDesc for Ticketing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ticketing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudbees.Ticketing",
	HandlerType: (*TicketingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Purchase",
			Handler:    _Ticketing_Purchase_Handler,
		},
		{
			MethodName: "GetReceipt",
			Handler:    _Ticketing_GetReceipt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticket.proto",
}
