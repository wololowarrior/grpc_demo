// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: seat.proto

package cloudbeespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Seating_List_FullMethodName   = "/cloudbees.Seating/List"
	Seating_Modify_FullMethodName = "/cloudbees.Seating/Modify"
)

// SeatingClient is the client API for Seating service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeatingClient interface {
	List(ctx context.Context, in *ListSeatsRequest, opts ...grpc.CallOption) (*ListSeatsResponse, error)
	Modify(ctx context.Context, in *ModifySeatRequest, opts ...grpc.CallOption) (*AllocatedSeat, error)
}

type seatingClient struct {
	cc grpc.ClientConnInterface
}

func NewSeatingClient(cc grpc.ClientConnInterface) SeatingClient {
	return &seatingClient{cc}
}

func (c *seatingClient) List(ctx context.Context, in *ListSeatsRequest, opts ...grpc.CallOption) (*ListSeatsResponse, error) {
	out := new(ListSeatsResponse)
	err := c.cc.Invoke(ctx, Seating_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatingClient) Modify(ctx context.Context, in *ModifySeatRequest, opts ...grpc.CallOption) (*AllocatedSeat, error) {
	out := new(AllocatedSeat)
	err := c.cc.Invoke(ctx, Seating_Modify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeatingServer is the server API for Seating service.
// All implementations should embed UnimplementedSeatingServer
// for forward compatibility
type SeatingServer interface {
	List(context.Context, *ListSeatsRequest) (*ListSeatsResponse, error)
	Modify(context.Context, *ModifySeatRequest) (*AllocatedSeat, error)
}

// UnimplementedSeatingServer should be embedded to have forward compatible implementations.
type UnimplementedSeatingServer struct {
}

func (UnimplementedSeatingServer) List(context.Context, *ListSeatsRequest) (*ListSeatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSeatingServer) Modify(context.Context, *ModifySeatRequest) (*AllocatedSeat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}

// UnsafeSeatingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeatingServer will
// result in compilation errors.
type UnsafeSeatingServer interface {
	mustEmbedUnimplementedSeatingServer()
}

func RegisterSeatingServer(s grpc.ServiceRegistrar, srv SeatingServer) {
	s.RegisterService(&Seating_ServiceDesc, srv)
}

func _Seating_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatingServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seating_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatingServer).List(ctx, req.(*ListSeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seating_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifySeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatingServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Seating_Modify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatingServer).Modify(ctx, req.(*ModifySeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Seating_ServiceDesc is the grpc.ServiceDesc for Seating service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Seating_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudbees.Seating",
	HandlerType: (*SeatingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Seating_List_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _Seating_Modify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seat.proto",
}
