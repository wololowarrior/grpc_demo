// Code generated by MockGen. DO NOT EDIT.
// Source: dao/seat.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	model "cloudbees/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSeatStore is a mock of SeatStore interface.
type MockSeatStore struct {
	ctrl     *gomock.Controller
	recorder *MockSeatStoreMockRecorder
}

// MockSeatStoreMockRecorder is the mock recorder for MockSeatStore.
type MockSeatStoreMockRecorder struct {
	mock *MockSeatStore
}

// NewMockSeatStore creates a new mock instance.
func NewMockSeatStore(ctrl *gomock.Controller) *MockSeatStore {
	mock := &MockSeatStore{ctrl: ctrl}
	mock.recorder = &MockSeatStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeatStore) EXPECT() *MockSeatStoreMockRecorder {
	return m.recorder
}

// Allocate mocks base method.
func (m *MockSeatStore) Allocate(arg0 int32, arg1 string) (*model.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allocate", arg0, arg1)
	ret0, _ := ret[0].(*model.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allocate indicates an expected call of Allocate.
func (mr *MockSeatStoreMockRecorder) Allocate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocate", reflect.TypeOf((*MockSeatStore)(nil).Allocate), arg0, arg1)
}

// Delete mocks base method.
func (m *MockSeatStore) Delete(ticketID int32, section string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ticketID, section)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSeatStoreMockRecorder) Delete(ticketID, section interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSeatStore)(nil).Delete), ticketID, section)
}

// Get mocks base method.
func (m *MockSeatStore) Get(id int32) (*model.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*model.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSeatStoreMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSeatStore)(nil).Get), id)
}

// List mocks base method.
func (m *MockSeatStore) List(section string) ([]*model.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", section)
	ret0, _ := ret[0].([]*model.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSeatStoreMockRecorder) List(section interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSeatStore)(nil).List), section)
}

// Modify mocks base method.
func (m *MockSeatStore) Modify(arg0 *model.Seat, arg1 string) (*model.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Modify", arg0, arg1)
	ret0, _ := ret[0].(*model.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Modify indicates an expected call of Modify.
func (mr *MockSeatStoreMockRecorder) Modify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockSeatStore)(nil).Modify), arg0, arg1)
}
